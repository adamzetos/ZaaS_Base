/*************************************************************
  Zack Quotation – Master Apps Script
  (paste into Code.gs – single project next to your Form)
**************************************************************/

/* ---------- GLOBAL CONSTANTS (adjust once) ---------------- */

const HOUR_PER_DAY = 8.0;                       // man-day definition

// Column indexes inside FeatureMatrix (1-based in UI, convert later)
const COLS = {                                  // keep forever
  QUESTION : 4,   // D  Question Title
  OPTION   : 5,   // E  Option / Row
  GRIDCOL  : 6,   // F  Column (grid)
  QTYPE    : 8,   // H  QType
  CALICAT  : 9,   // I  Calibration
  FEFA     :10    // J  FeFa
};

/* ---------- MAIN TRIGGER ---------------------------------- */

function onFormSubmit(e){

  const resp     = e.namedValues;                          // answers hash
  const client   = (resp['Client Name']||[''])[0].trim() || 'UNKNOWN';

  /* 1.  PDF summary --------------------------------------- */
  const pdfId = buildQuotePDF(client, resp);

  /* 2.  Create client sheet & map selections -------------- */
  const calcSheet = createClientSheet(client);
  const selRows   = mapSelectionsToFeatures(resp, calcSheet);

  /* 3.  Compute workload + cost --------------------------- */
  computeEffortAndCost(selRows, calcSheet);

  // Optional e-mail hook
  MailApp.sendEmail('adam@zetos.com', `Quote for ${client}`, 
                    'Your quote is ready', {attachments:[DriveApp.getFileById(pdfId)]});
}

/* ==========================================================
   STEP-1  •  PDF generation
   ========================================================== */
function buildQuotePDF(client, resp){

  // ── load / fallback template ────────────────────────────
  const tmplFile = getFirstFileByName('Zack_PDF_Template');
  const tmplDoc  = tmplFile
        ? DocumentApp.openById(tmplFile.getId())
        : DocumentApp.create('Z_Temp');

  // ── copy template to fresh doc ──────────────────────────
  const copy = tmplDoc.makeCopy(
        `Quote_${client}_${Utilities.formatDate(new Date(), Session.getScriptTimeZone(),'yyyyMMdd_HHmm')}`
        );
  const body = DocumentApp.openById(copy.getId()).getBody();

  body.clear();
  body.appendParagraph(`Quotation Request – ${client}`)
      .setHeading(DocumentApp.ParagraphHeading.HEADING1)
      .setSpacingAfter(12);

  Object.keys(resp).forEach(q=>{
    body.appendParagraph(`${q}: ${resp[q].join(', ')}`);
  });

  body.appendPageBreak()
      .appendParagraph('— Generated by Zack —')
      .setAlignment(DocumentApp.HorizontalAlignment.CENTER);

  body.saveAndClose();

  const pdfBlob = DriveApp.getFileById(copy.getId())
                 .getAs(MimeType.PDF)
                 .setName(copy.getName()+'.pdf');

  return DriveApp.createFile(pdfBlob).getId();   // returns final PDF file-ID
}

/* ==========================================================
   STEP-2  •  Create client quote sheet
   ========================================================== */
function createClientSheet(client){

  const catFile = getFirstFileByName('Zack_Catalog');
  const catSS   = SpreadsheetApp.openById(catFile.getId());

  const existing = catSS.getSheetByName(`Client ${client} quote`);
  if (existing) existing.clear();               // overwrite re-quote
  const sh = existing || catSS.insertSheet(`Client ${client} quote`);

  sh.appendRow(['Question','Option','Grid','QType','CaliCat','FeFa']);
  return sh;
}

/* ----------------------------------------------------------
   Map Form selections ➜ FeatureMatrix rows
-----------------------------------------------------------*/
function mapSelectionsToFeatures(resp, targetSheet){

  const fmSS   = SpreadsheetApp.openById(getFirstFileByName('Zack_Catalog').getId())
                 .getSheetByName('FeatureMatrix');
  const data   = fmSS.getDataRange().getValues();
  const header = data.shift();                                 // pop first row

  const col = h => header.indexOf(h);
  const rowsPicked = [];

  data.forEach(r=>{
      const qTitle = r[col('Question Title')];
      const opt    = r[col('Option / Row')];
      const grid   = r[col('Column (grid)')];

      const ansRaw = (resp[qTitle]||['']).join(', ').toLowerCase();

      const hit = new RegExp('(^|,\\s*)'+opt.toLowerCase()+'(,|$)').test(ansRaw) &&
                  (grid === '' || ansRaw.includes(grid.toLowerCase()));

      if (hit){
        targetSheet.appendRow([qTitle,opt,grid,r[col('QType')],
                               r[col('Calibration')],r[col('FeFa')] ]);
        rowsPicked.push(r);
      }
  });
  return rowsPicked;
}

/* ==========================================================
   STEP-3  •  Calculate workload & €€
   ========================================================== */
function computeEffortAndCost(selRows, sh){

  const calib = loadSheetToObj('Calibration','CaliCat');
  const rates = loadSheetToObj('Roles','Role');          // €/day

  const roleTot = {};                                    // hours
  let   globalM = 1;

  selRows.forEach(r=>{
     const qtype = r[COLS.QTYPE-1];

     if (qtype === 'Info') return;

     if (qtype === 'PCFa'){                    // global multiplier row
        const mul = parseFloat(r[COLS.FEFA-1]);
        if (!isNaN(mul) && mul>0) globalM *= mul;
        return;
     }

     const base  = calib[r[COLS.CALICAT-1]];
     if (!base){ Logger.log('Missing CaliCat for '+r[0]+' / '+r[1]); return; }

     const fefa  = parseFloat(r[COLS.FEFA-1]) || 0;

     Object.keys(base).forEach(role=>{
        roleTot[role] = (roleTot[role]||0) + base[role]*fefa;
     });
  });

  // apply project-level complexity
  Object.keys(roleTot).forEach(role=> roleTot[role] *= globalM );

  /* ---- write result under item list ---- */
  sh.appendRow([]);
  sh.appendRow(['Role','Hours','Man-Days','Cost (€)']);

  Object.keys(roleTot).forEach(role=>{
      const hrs  = roleTot[role];
      const days = +(hrs / HOUR_PER_DAY).toFixed(2);
      const eur  = +(days * (rates[role]||0)).toFixed(2);
      sh.appendRow([role, hrs.toFixed(1), days, eur]);
  });
}

/* ==========================================================
   Utility — load a sheet tab into keyed object
   ========================================================== */
function loadSheetToObj(tabName, pk){

  const file = getFirstFileByName('Zack_Catalog');
  const sh   = SpreadsheetApp.openById(file.getId()).getSheetByName(tabName);
  const arr  = sh.getDataRange().getValues();
  const head = arr.shift();

  const obj  = {};
  arr.forEach(r=>{
     const key = r[ head.indexOf(pk) ];
     const row = {};
     head.forEach((h,i)=>{
        if(i===head.indexOf(pk)) return;
        const n = parseFloat(r[i]);
        if (!isNaN(n)) row[h.replace(/-h|€/,'')] = n;
     });
     obj[key] = row;
  });
  return obj;
}

/* ==========================================================
   Utility — safe file-by-name (first match)
   ========================================================== */
function getFirstFileByName(name){
  const files = DriveApp.getFilesByName(name);
  return files.hasNext() ? files.next() : null;
}